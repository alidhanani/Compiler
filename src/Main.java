import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;
import java.io.*;

/**
 *
 * Project Part 3: LLVM generator
 *
 * @author Dhanani, Ali
 *
 */

public class Main {
        /**
         *
         * The Parser
         *
         * 
         * @param args The argument(s) given to the program
         * @throws IO
         * @throws FileNotFoundException java.io.FileNotFoundException if the specified
         *                               file does not exist
         *
         */
        public static void main(String[] args) throws FileNotFoundException, IOException, SecurityException {
                // get the argements
                String src = "";
                String outputfile = "";
                switch (args.length) {
                case 2:
                        if (args[0].equals("-exec")) {
                                src = args[1];
                                break;
                        }

                case 3:
                        if (args[1].equals("-o")) {
                                src = args[0];
                                outputfile = args[2];
                                break;
                        }

                default:
                        System.out.println(
                                        "Usage: java -jar part3.jar inputFile.sf -o outputFile.ll \n java -jar part3.jar -exec inputFile.sf");
                        System.exit(0);
                }

                // Open the file given in argument
                FileReader source = new FileReader(src);
                /**
                 * The lexer generated by <a href="http://www.jflex.de/">JFlex</a> 1.4.3
                 */
                final LexicalAnalyzer analyzer = new LexicalAnalyzer(source);

                // initialise the parser with the lexicalanalyzer in the parametre
                Parser p = new Parser(analyzer);

                /**
                 * call the function startParse()
                 */

                ParseTree tree = p.startParse();
                LlvmGenerator llvm = new LlvmGenerator(tree);
                llvm.Generate();
                if (outputfile.equals("")) {
                        System.out.println(llvm.toString());
                } else {
                        FileWriter fwTree = null;
                        BufferedWriter bwTree = null;
                        try {
                                fwTree = new FileWriter(outputfile);
                                bwTree = new BufferedWriter(fwTree);
                                bwTree.write(llvm.toString());
                                bwTree.close();
                        } catch (IOException e) {
                                e.printStackTrace();
                        }

                }

        }

}
